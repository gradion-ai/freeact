{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>freeact</code> is a lightweight Python implementation of AI agents that use code actions<sup>1</sup>\u2014snippets of executable Python code\u2014to dynamically interact with and adapt to their environment. </p> <p></p> <p><code>freeact</code> agents:</p> <ul> <li>Have a broad action space since they can install and use any Python library in their code actions</li> <li>Autonomously improve their code actions through reflection on environmental observations, execution feedback, and human input</li> <li>Store code actions as custom skills in long-term memory for efficient reuse, enabling the composition of higher-level capabilities</li> <li>Perform software-engineering tasks during the interactive development and optimization of custom agent skills</li> </ul> <p><code>freeact</code> agents can function as general-purpose agents right out of the box\u2014no extra tool configuration needed\u2014or be specialized for specific environments using custom skills and system extensions:</p> <ul> <li>Custom skills provide optimized interfaces for the agent to interact with specific environments</li> <li>System extensions provide natural language configurations for custom domain knowledge and agent behavior</li> </ul> <p><code>freeact</code> connects coding LLMs (capable of multi-turn reasoning) to <code>ipybox</code>\u2014a secure code execution sandbox\u2014and enables communication with users and other agents through an end-to-end streaming protocol.</p> <p><code>freeact</code> also includes a range of predefined skills to expand agent capabilities. For instance, Google Search and Perplexity Search provide access to up-to-date information, while the Zotero skill enables efficient reference management. Explore all of them in the <code>freeact-skills</code> project.</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>The best way to get started with <code>freeact</code> is to follow the tutorials after completing the initial setup. </p> <ol> <li>Basic usage - Learn how to set up an agent, model, and code execution environment. This minimal setup demonstrates running generative Google searches and plotting the results.</li> <li>Custom skills - Learn how to develop and improve custom skills in a conversation with the agent. The agent leverages its software engineering capabilities to support this process.</li> <li>System extensions - Learn how to define custom agent behavior and constraints through system extensions in natural language. This enables human-in-the-loop workflows, proactive agents, and more.</li> </ol> <p>All tutorials use the <code>freeact</code> CLI for user-agent interactions. The Basic usage tutorial additionally demonstrates the minimal Python code needed to implement a <code>freeact</code> agent.</p>"},{"location":"#cli","title":"CLI","text":"<p><code>freeact</code> provides a minimalistic command-line interface (CLI) for running agents. It is currently intended for demonstration purposes only. Install <code>freeact</code> and run the following command to see all available options:</p> <pre><code>python -m freeact.cli --help\n</code></pre> <p>or check the tutorials for usage examples.</p>"},{"location":"#supported-models","title":"Supported models","text":"<p>The following models are currently supported:</p> <ul> <li><code>claude-3-5-sonnet-20241022</code></li> <li><code>claude-3-5-haiku-20241022</code></li> <li><code>gemini-2.0-flash-exp</code></li> </ul> <p>For most use cases, we recommend <code>claude-3-5-sonnet-20241022</code> due to its robust performance. The <code>gemini-2.0-flash-exp</code> integration allows developers to replace Gemini\u2019s native code execution with <code>ipybox</code>\u2014a secure, locally deployable sandbox that supports extended execution timeouts, on-the-fly package installations, automatic plot generation, and additional features. Note that <code>gemini-2.0-flash-exp</code> support is still experimental.</p>"},{"location":"#status","title":"Status","text":"<p><code>freeact</code> is in an early stage of development, with ongoing development of new features. Community feedback and contributions are greatly appreciated as <code>freeact</code> continues to evolve.</p> <ol> <li> <p>Our approach draws inspiration from prior work including TaskWeaver, CodeAct, and OpenHands. <code>freeact</code> emphasizes a lightweight, extensible codebase and straightforward Python API, making integration into any Python host application simple and practical. Another key difference is its focus on interactive development of agent skills, enabling rapid prototyping and iteration.\u00a0\u21a9</p> </li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#python-package","title":"Python package","text":"<pre><code>pip install freeact\n</code></pre>"},{"location":"installation/#execution-environment","title":"Execution environment","text":"<p><code>freeact</code> agents execute code actions in <code>ipybox</code>, a secure code execution environment. To build an <code>ipybox</code> Docker image with <code>freeact-skills</code> pre-installed:</p> <ol> <li> <p>Create a <code>dependencies.txt</code> file:</p> dependencies.txt<pre><code>freeact-skills = {version = \"0.0.6\", extras = [\"all\"]}\n# Add additional dependencies here if needed\n</code></pre> <p>Note</p> <p><code>dependencies.txt</code> must follow the Poetry dependency specification format.</p> </li> <li> <p>Build the <code>ipybox</code> Docker image:</p> <pre><code>python -m ipybox build -t gradion-ai/ipybox-default -d dependencies.txt\n</code></pre> <p>To use the image, reference it in <code>CodeExecutionContainer</code> when creating an <code>ipybox</code> Docker container. Use the <code>env</code> argument to set any API keys required by the pre-installed skills. </p> </li> </ol>"},{"location":"api/agent/","title":"Agent","text":""},{"location":"api/agent/#freeact.agent.CodeActAgent","title":"CodeActAgent","text":"<pre><code>CodeActAgent(model: CodeActModel, executor: CodeExecutor)\n</code></pre> <p>An agent that iteratively generates and executes code actions to process user queries.</p> <p>The agent implements a loop that:</p> <ol> <li>Generates code actions using a <code>CodeActModel</code></li> <li>Executes the code using a <code>CodeExecutor</code></li> <li>Provides execution feedback to the <code>CodeActModel</code></li> <li>Continues until the model generates a final response</li> </ol> <p>The agent maintains conversational state and can have multiple interaction turns with the user.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>CodeActModel</code> <p>Model instance for generating code actions</p> required <code>executor</code> <code>CodeExecutor</code> <p>Executor instance for running the generated code</p> required Source code in <code>freeact/agent.py</code> <pre><code>def __init__(self, model: CodeActModel, executor: CodeExecutor):\n    self.model = model\n    self.executor = executor\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeActAgent.run","title":"run","text":"<pre><code>run(user_query: str, max_steps: int = 30, step_timeout: float = 120, **kwargs) -&gt; CodeActAgentTurn\n</code></pre> <p>Process a user query through a sequence of model interactions and code executions.</p> <p>Initiates an interaction turn that processes the user query through alternating steps of code action model interactions and code execution until a final response is generated by the model.</p> <p>Parameters:</p> Name Type Description Default <code>user_query</code> <code>str</code> <p>The input query from the user to process</p> required <code>max_steps</code> <code>int</code> <p>Maximum number of interaction steps before raising <code>MaxStepsReached</code></p> <code>30</code> <code>step_timeout</code> <code>float</code> <p>Timeout in seconds for each code execution step</p> <code>120</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the model</p> <code>{}</code> <p>Returns:</p> Type Description <code>CodeActAgentTurn</code> <p>A <code>CodeActAgentTurn</code> instance representing the complete interaction sequence</p> <p>Raises:</p> Type Description <code>MaxStepsReached</code> <p>If the interaction exceeds max_steps without completion</p> Source code in <code>freeact/agent.py</code> <pre><code>def run(\n    self,\n    user_query: str,\n    max_steps: int = 30,\n    step_timeout: float = 120,\n    **kwargs,\n) -&gt; CodeActAgentTurn:\n    \"\"\"Process a user query through a sequence of model interactions and code executions.\n\n    Initiates an interaction turn that processes the user query through alternating\n    steps of code action model interactions and code execution until a final response\n    is generated by the model.\n\n    Args:\n        user_query: The input query from the user to process\n        max_steps: Maximum number of interaction steps before raising `MaxStepsReached`\n        step_timeout: Timeout in seconds for each code execution step\n        **kwargs: Additional keyword arguments passed to the model\n\n    Returns:\n        A `CodeActAgentTurn` instance representing the complete interaction sequence\n\n    Raises:\n        MaxStepsReached: If the interaction exceeds max_steps without completion\n    \"\"\"\n    iter = self._stream(\n        user_query=user_query,\n        max_steps=max_steps,\n        step_timeout=step_timeout,\n        **kwargs,\n    )\n    return CodeActAgentTurn(iter)\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeActAgentResponse","title":"CodeActAgentResponse  <code>dataclass</code>","text":"<pre><code>CodeActAgentResponse(text: str)\n</code></pre> <p>Final response from the agent to the user for the current turn.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>The final response text to present to the user</p>"},{"location":"api/agent/#freeact.agent.CodeActAgentTurn","title":"CodeActAgentTurn","text":"<pre><code>CodeActAgentTurn(iter: AsyncIterator[CodeActModelTurn | CodeExecution | CodeActModelResponse])\n</code></pre> <p>Represents a complete interaction turn between the user and agent.</p> <p>A turn consists of a sequence of model interaction turns and code executions, continuing until:</p> <ul> <li>The model provides a final response without code</li> <li>An error occurs</li> <li>Maximum steps are reached</li> </ul> <p>The turn can be processed either in bulk via <code>response()</code> or incrementally via <code>stream()</code>.</p> Source code in <code>freeact/agent.py</code> <pre><code>def __init__(self, iter: AsyncIterator[CodeActModelTurn | CodeExecution | CodeActModelResponse]):\n    self._iter = iter\n    self._response: CodeActAgentResponse | None = None\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeActAgentTurn.response","title":"response  <code>async</code>","text":"<pre><code>response() -&gt; CodeActAgentResponse\n</code></pre> <p>Get the final response for this interaction turn.</p> <p>Waits for the complete interaction sequence to finish, including any intermediate model interaction and code executions. The final response is cached after the first call.</p> <p>Returns:</p> Type Description <code>CodeActAgentResponse</code> <p>The final agent response containing the text to present to the user</p> Note <p>This method will process the entire interaction sequence if called before streaming is complete. For incremental processing, use the <code>stream()</code> method instead.</p> Source code in <code>freeact/agent.py</code> <pre><code>async def response(self) -&gt; CodeActAgentResponse:\n    \"\"\"Get the final response for this interaction turn.\n\n    Waits for the complete interaction sequence to finish, including any\n    intermediate model interaction and code executions. The final response\n    is cached after the first call.\n\n    Returns:\n        The final agent response containing the text to present to the user\n\n    Note:\n        This method will process the entire interaction sequence if called\n        before streaming is complete. For incremental processing, use the\n        `stream()` method instead.\n    \"\"\"\n    if self._response is None:\n        async for _ in self.stream():\n            pass\n    return self._response  # type: ignore\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeActAgentTurn.stream","title":"stream  <code>async</code>","text":"<pre><code>stream() -&gt; AsyncIterator[CodeActModelTurn | CodeExecution]\n</code></pre> <p>Stream the sequence of model turns and code executions.</p> <p>Yields each step in the interaction sequence as it occurs:</p> <ul> <li><code>CodeActModelTurn</code>: Model thinking and code action generation steps</li> <li><code>CodeExecution</code>: Code actions being executed in the execution environment</li> </ul> <p>The sequence continues until the model provides a final response, which is stored internally but not yielded.</p> <p>Yields:</p> Type Description <code>AsyncIterator[CodeActModelTurn | CodeExecution]</code> <p>Individual model turns and code executions in sequence</p> Note <p>The final <code>CodeActModelResponse</code> is not yielded but is stored internally and can be accessed via the <code>response()</code> method.</p> Source code in <code>freeact/agent.py</code> <pre><code>async def stream(self) -&gt; AsyncIterator[CodeActModelTurn | CodeExecution]:\n    \"\"\"Stream the sequence of model turns and code executions.\n\n    Yields each step in the interaction sequence as it occurs:\n\n    - `CodeActModelTurn`: Model thinking and code action generation steps\n    - `CodeExecution`: Code actions being executed in the execution environment\n\n    The sequence continues until the model provides a final response,\n    which is stored internally but not yielded.\n\n    Yields:\n        Individual model turns and code executions in sequence\n\n    Note:\n        The final `CodeActModelResponse` is not yielded but is stored\n        internally and can be accessed via the `response()` method.\n    \"\"\"\n    async for elem in self._iter:\n        match elem:\n            case CodeActModelResponse() as msg:\n                self._response = CodeActAgentResponse(text=msg.text)\n            case _:\n                yield elem\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeExecution","title":"CodeExecution","text":"<pre><code>CodeExecution(execution: Execution, images_dir: Path)\n</code></pre> <p>Represents a code execution in a <code>CodeExecutor</code> instance.</p> <p>Supports both bulk and streaming access to results generated by the executor.</p> <p>Attributes:</p> Name Type Description <code>execution</code> <p>The underlying <code>ipybox</code> execution instance</p> <code>images_dir</code> <p>Directory where generated images are saved</p> Source code in <code>freeact/agent.py</code> <pre><code>def __init__(self, execution: Execution, images_dir: Path):\n    self.execution = execution\n    self.images_dir = images_dir\n    self._result: CodeExecutionResult | None = None\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeExecution.result","title":"result  <code>async</code>","text":"<pre><code>result(timeout: float = 120) -&gt; CodeExecutionResult\n</code></pre> <p>Get the complete result of the code execution.</p> <p>Waits for the execution to finish and returns a <code>CodeExecutionResult</code> containing all output, generated images, and error status. The result is cached after the first call.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Maximum time in seconds to wait for execution completion</p> <code>120</code> <p>Returns:</p> Type Description <code>CodeExecutionResult</code> <p>A <code>CodeExecutionResult</code> containing the execution output, images, and error status</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>If execution exceeds the specified timeout</p> Source code in <code>freeact/agent.py</code> <pre><code>async def result(self, timeout: float = 120) -&gt; CodeExecutionResult:\n    \"\"\"Get the complete result of the code execution.\n\n    Waits for the execution to finish and returns a `CodeExecutionResult` containing\n    all output, generated images, and error status. The result is cached after\n    the first call.\n\n    Args:\n        timeout: Maximum time in seconds to wait for execution completion\n\n    Returns:\n        A `CodeExecutionResult` containing the execution output, images, and error status\n\n    Raises:\n        TimeoutError: If execution exceeds the specified timeout\n    \"\"\"\n    if self._result is None:\n        async for _ in self.stream(timeout=timeout):\n            pass\n    return self._result  # type: ignore\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeExecution.stream","title":"stream  <code>async</code>","text":"<pre><code>stream(timeout: float = 120) -&gt; AsyncIterator[str]\n</code></pre> <p>Stream the execution output as it becomes available.</p> <p>Yields chunks of output text as they are produced by the execution. Generated images are not part of the stream but are stored internally in <code>CodeExecutionResult</code> which can be obtained by calling the <code>result()</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Maximum time in seconds to wait for execution completion</p> <code>120</code> <p>Yields:</p> Type Description <code>AsyncIterator[str]</code> <p>Chunks of code execution output text</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>If execution exceeds the specified timeout</p> Source code in <code>freeact/agent.py</code> <pre><code>async def stream(self, timeout: float = 120) -&gt; AsyncIterator[str]:\n    \"\"\"Stream the execution output as it becomes available.\n\n    Yields chunks of output text as they are produced by the execution. Generated\n    images are not part of the stream but are stored internally in `CodeExecutionResult`\n    which can be obtained by calling the `result()` method.\n\n    Args:\n        timeout: Maximum time in seconds to wait for execution completion\n\n    Yields:\n        Chunks of code execution output text\n\n    Raises:\n        TimeoutError: If execution exceeds the specified timeout\n    \"\"\"\n    images = {}\n\n    try:\n        async for chunk in self.execution.stream(timeout=timeout):\n            yield chunk\n    except ExecutionError as e:\n        is_error = True\n        text = e.trace\n        yield text\n    except asyncio.TimeoutError:\n        is_error = True\n        text = \"Execution timed out\"\n        yield text\n    else:\n        result = await self.execution.result()\n        text = result.text\n        is_error = False\n\n        if result.images:\n            chunk = \"\\n\\nProduced images:\"\n            yield chunk\n            text += chunk\n\n        for i, image in enumerate(result.images):\n            path = await self._save_image(image)\n            chunk = f\"\\n![image_{i}]({path})\"\n            yield chunk\n            text += chunk\n            images[path] = image\n\n    self._result = CodeExecutionResult(text=text, images=images, is_error=is_error)\n</code></pre>"},{"location":"api/agent/#freeact.agent.CodeExecutionResult","title":"CodeExecutionResult  <code>dataclass</code>","text":"<pre><code>CodeExecutionResult(text: str, images: Dict[Path, Image], is_error: bool)\n</code></pre> <p>Result of executing code in a <code>CodeExecutor</code> instance.</p> <p>Stores the execution output, any generated images, and error status from running code in the execution environment.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Execution output text or error trace</p> required <code>images</code> <code>Dict[Path, Image]</code> <p>Dictionary mapping file paths to generated images</p> required <code>is_error</code> <code>bool</code> <p>Whether the execution resulted in an error</p> required"},{"location":"api/agent/#freeact.agent.MaxStepsReached","title":"MaxStepsReached","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when the maximum number of steps per user query is reached.</p> <p>This exception indicates that the agent has reached its maximum allowed interaction steps while processing a user query.</p>"},{"location":"api/claude/","title":"Claude","text":""},{"location":"api/claude/#freeact.model.claude.model.ClaudeModelName","title":"ClaudeModelName  <code>module-attribute</code>","text":"<pre><code>ClaudeModelName = Literal['claude-3-5-haiku-20241022', 'claude-3-5-sonnet-20241022']\n</code></pre>"},{"location":"api/claude/#freeact.model.claude.model.Claude","title":"Claude","text":"<pre><code>Claude(logger: Logger, model_name: ClaudeModelName, prompt_caching: bool = False, system_extension: str | None = None, system_message: str | None = None, retry_max_attempts: int = 10, retry_wait_strategy: WaitStrategy = WaitExponential(multiplier=1, max=10, exp_base=2))\n</code></pre> <p>               Bases: <code>CodeActModel</code></p> <p>A <code>CodeActModel</code> implementation based on Anthropic's Claude API.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger instance for logging requests and responses.</p> required <code>model_name</code> <code>ClaudeModelName</code> <p>Name of the Claude model to use (e.g., \"claude-3-5-sonnet-20241022\").</p> required <code>prompt_caching</code> <code>bool</code> <p>Whether to enable prompt caching. Defaults to False.</p> <code>False</code> <code>system_extension</code> <code>str | None</code> <p>Additional system prompt text. Defaults to None.</p> <code>None</code> <code>system_message</code> <code>str | None</code> <p>Complete system message to override default. Defaults to None.</p> <code>None</code> <code>retry_max_attempts</code> <code>int</code> <p>Maximum number of retry attempts. Defaults to 10.</p> <code>10</code> Source code in <code>freeact/model/claude/model.py</code> <pre><code>def __init__(\n    self,\n    logger: Logger,\n    model_name: ClaudeModelName,\n    prompt_caching: bool = False,\n    system_extension: str | None = None,\n    system_message: str | None = None,\n    retry_max_attempts: int = 10,\n    retry_wait_strategy: WaitStrategy = WaitExponential(multiplier=1, max=10, exp_base=2),\n):\n    if system_message and system_extension:\n        raise ValueError(\"If system_message is provided, system_extension must be None\")\n\n    if system_message:\n        self.system_message = system_message\n    else:\n        self.system_message = SYSTEM_TEMPLATE.format(extensions=system_extension or \"\")\n\n    self.logger = logger\n    self.model_name = model_name\n    self.prompt_caching = prompt_caching\n\n    self._history = []  # type: ignore\n    self._tool_names = [t[\"name\"] for t in TOOLS]\n\n    self._client = AsyncAnthropic(\n        default_headers={\n            \"anthropic-beta\": \"prompt-caching-2024-07-31\",\n        }\n        if prompt_caching\n        else None,\n    )\n    self._retry_max_attempts = retry_max_attempts\n    self._retry_wait_strategy = retry_wait_strategy\n</code></pre>"},{"location":"api/executor/","title":"Executor","text":""},{"location":"api/executor/#freeact.executor.CodeExecutionContainer","title":"CodeExecutionContainer","text":"<pre><code>CodeExecutionContainer(tag: str, env: dict[str, str] | None = None, port: int | None = None, workspace_path: Path | str | None = None)\n</code></pre> <p>               Bases: <code>ExecutionContainer</code></p> <p>Context manager for managing code execution container lifecycle.</p> <p>Extends <code>ipybox</code>'s <code>ExecutionContainer</code> to provide workspace-specific bind mounts for skill directories. Handles creation, port mapping, volume binding, and cleanup of the container.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>Docker image tag to use for the container</p> required <code>env</code> <code>dict[str, str] | None</code> <p>Optional environment variables to set in the container</p> <code>None</code> <code>port</code> <code>int | None</code> <p>Optional host port to map to container's executor port. Random port used if not specified</p> <code>None</code> <code>workspace_path</code> <code>Path | str | None</code> <p>Optional path to workspace directory, defaults to \"workspace\"</p> <code>None</code> Example <pre><code>async with CodeExecutionContainer(tag=\"gradion-ai/ipybox-example\", workspace_path=Path(\"workspace\")) as container:\n    # Container is running and available at container.port\n    ...\n# Container is automatically cleaned up after context exit\n</code></pre> Source code in <code>freeact/executor.py</code> <pre><code>def __init__(\n    self,\n    tag: str,\n    env: dict[str, str] | None = None,\n    port: int | None = None,\n    workspace_path: Path | str | None = None,\n):\n    self.workspace = Workspace(Path(workspace_path) if workspace_path else Path(\"workspace\"))\n\n    binds = {\n        self.workspace.private_skills_path: \"skills/private\",\n        self.workspace.shared_skills_path: \"skills/shared\",\n    }\n\n    super().__init__(tag=tag, binds=binds, env=env, port=port)\n</code></pre>"},{"location":"api/executor/#freeact.executor.CodeExecutor","title":"CodeExecutor","text":"<pre><code>CodeExecutor(key: str, workspace: Workspace, *args, **kwargs)\n</code></pre> <p>               Bases: <code>ExecutionClient</code></p> <p>Context manager for executing code in an IPython kernel running in a <code>CodeExecutionContainer</code>.</p> <p>Provides stateful code execution within a container, maintaining kernel state between executions. Manages scoped skill and image storage directories.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Scope identifier used to:</p> <ul> <li>Create scoped private skill directories for an executor instance   (host path <code>{workspace.path}/skills/private/{key}</code>)</li> <li>Create scoped image storage directories for an executor instance   (host-only path <code>{workspace.path}/images/{key}</code>).</li> <li>Set the working directory to the scoped private skill directory</li> </ul> required <code>workspace</code> <code>Workspace</code> <p>a <code>Workspace</code> instance defining the skill directory structure</p> required <code>*args</code> <p>Additional arguments passed to the <code>ExecutionClient</code> constructor</p> <code>()</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the <code>ExecutionClient</code> constructor</p> <code>{}</code> Example <pre><code>async with CodeExecutor(key=\"agent-1\", workspace=container.workspace, port=container.port) as executor:\n    # Execute code with access to skill directories\n    await executor.execute(\"print('Hello')\")\n</code></pre> Source code in <code>freeact/executor.py</code> <pre><code>def __init__(self, key: str, workspace: Workspace, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    self.key = key\n    self.workspace = workspace\n\n    # Host mapping for working directory inside container\n    self.working_dir = workspace.private_skills_path / key\n\n    # images are stored on host only (for now)\n    self.images_dir = workspace.path / \"images\" / key\n</code></pre>"},{"location":"api/executor/#freeact.executor.CodeExecutor.skill_paths","title":"skill_paths  <code>property</code>","text":"<pre><code>skill_paths: List[Path]\n</code></pre> <p>A path list containing the shared skill path and the scoped private skill path (= working directory).</p>"},{"location":"api/executor/#freeact.executor.Workspace","title":"Workspace  <code>dataclass</code>","text":"<pre><code>Workspace(path: Path)\n</code></pre> <p>Represents a workspace containing shared and private agent skills. These are skills that are not pre-installed in the code execution container.</p> <p>Workspaces are bind-mounted into <code>CodeExecutionContainer</code> to share skills between a code execution container and the host machine.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Base path of the workspace directory structure on the host.</p> required"},{"location":"api/executor/#freeact.executor.Workspace.private_skills_path","title":"private_skills_path  <code>property</code>","text":"<pre><code>private_skills_path: Path\n</code></pre> <p>Path to private skills root directory.</p>"},{"location":"api/executor/#freeact.executor.Workspace.shared_skills_path","title":"shared_skills_path  <code>property</code>","text":"<pre><code>shared_skills_path: Path\n</code></pre> <p>Path to shared skills directory.</p>"},{"location":"api/gemini/","title":"Gemini","text":""},{"location":"api/gemini/#freeact.model.gemini.model.chat.GeminiModelName","title":"GeminiModelName  <code>module-attribute</code>","text":"<pre><code>GeminiModelName = Literal['gemini-2.0-flash-exp']\n</code></pre>"},{"location":"api/gemini/#freeact.model.gemini.model.chat.Gemini","title":"Gemini","text":"<pre><code>Gemini(model_name: GeminiModelName = 'gemini-2.0-flash-exp', skill_sources: str | None = None, temperature: float = 0.0, max_tokens: int = 4096)\n</code></pre> <p>               Bases: <code>CodeActModel</code></p> <p>A <code>CodeActModel</code> implementation based on Google's Gemini 2 chat API.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>GeminiModelName</code> <p>The specific Gemini 2 model to use</p> <code>'gemini-2.0-flash-exp'</code> <code>skill_sources</code> <code>str | None</code> <p>Skill module sources to include in the system instruction</p> <code>None</code> <code>temperature</code> <code>float</code> <p>Controls randomness in the model's output (0.0 = deterministic)</p> <code>0.0</code> <code>max_tokens</code> <code>int</code> <p>Maximum number of tokens in the model's response</p> <code>4096</code> Source code in <code>freeact/model/gemini/model/chat.py</code> <pre><code>def __init__(\n    self,\n    model_name: GeminiModelName = \"gemini-2.0-flash-exp\",\n    skill_sources: str | None = None,\n    temperature: float = 0.0,\n    max_tokens: int = 4096,\n):\n    self._model_name = model_name\n    self._client = genai.Client(http_options={\"api_version\": \"v1alpha\"})\n    self._chat = self._client.aio.chats.create(\n        model=model_name,\n        config=GenerateContentConfig(\n            temperature=temperature,\n            max_output_tokens=max_tokens,\n            response_modalities=[\"TEXT\"],\n            system_instruction=SYSTEM_TEMPLATE.format(python_modules=skill_sources or \"\"),\n        ),\n    )\n</code></pre>"},{"location":"api/gemini/#freeact.model.gemini.model.live.GeminiLive","title":"GeminiLive  <code>async</code>","text":"<pre><code>GeminiLive(model_name: GeminiModelName = 'gemini-2.0-flash-exp', skill_sources: str | None = None, temperature: float = 0.0, max_tokens: int = 4096)\n</code></pre> <p>Context manager for a <code>CodeActModel</code> implementation based on Google's Gemini 2 live API.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>GeminiModelName</code> <p>The specific Gemini 2 model to use</p> <code>'gemini-2.0-flash-exp'</code> <code>skill_sources</code> <code>str | None</code> <p>Skill module sources to include in the system instruction.</p> <code>None</code> <code>temperature</code> <code>float</code> <p>Controls randomness in the model's output (0.0 = deterministic)</p> <code>0.0</code> <code>max_tokens</code> <code>int</code> <p>Maximum number of tokens in the model's response</p> <code>4096</code> Example <pre><code>async with GeminiLive(model_name=\"gemini-2.0-flash-exp\", skill_sources=skill_sources) as model:\n    # use model with active session to Gemini 2 live API\n    agent = CodeActAgent(model=model, ...)\n</code></pre> Source code in <code>freeact/model/gemini/model/live.py</code> <pre><code>@asynccontextmanager\nasync def GeminiLive(\n    model_name: GeminiModelName = \"gemini-2.0-flash-exp\",\n    skill_sources: str | None = None,\n    temperature: float = 0.0,\n    max_tokens: int = 4096,\n):\n    \"\"\"\n    Context manager for a `CodeActModel` implementation based on Google's Gemini 2 live API.\n\n    Args:\n        model_name: The specific Gemini 2 model to use\n        skill_sources: Skill module sources to include in the system instruction.\n        temperature: Controls randomness in the model's output (0.0 = deterministic)\n        max_tokens: Maximum number of tokens in the model's response\n\n    Example:\n        ```python\n        async with GeminiLive(model_name=\"gemini-2.0-flash-exp\", skill_sources=skill_sources) as model:\n            # use model with active session to Gemini 2 live API\n            agent = CodeActAgent(model=model, ...)\n        ```\n    \"\"\"\n\n    client = genai.Client(http_options={\"api_version\": \"v1alpha\"})\n    config = {\n        \"tools\": [],\n        \"generation_config\": {\n            \"temperature\": temperature,\n            \"max_output_tokens\": max_tokens,\n            \"response_modalities\": [\"TEXT\"],\n            \"system_instruction\": SYSTEM_TEMPLATE.format(\n                python_modules=skill_sources or \"\",\n            ),\n        },\n    }\n\n    async with client.aio.live.connect(model=model_name, config=config) as session:\n        yield _GeminiLive(session)\n</code></pre>"},{"location":"api/logger/","title":"Logger","text":""},{"location":"api/logger/#freeact.logger.Logger","title":"Logger","text":"<pre><code>Logger(file: str | Path | None = None)\n</code></pre> <p>An asynchronous logger supporting contextual logging with configurable output.</p> <p>Provides a queue-based logging system that can write to either a file or stdout. Supports contextual logging where entries can be grouped under specific contexts, and includes support for both message and error logging.</p> <p>Can be used either as an async context manager or directly:</p> <ul> <li> <p>As a context manager:     <pre><code>async with Logger(\"app.log\") as logger:\n    await logger.log(\"message\")\n    # Logger automatically closes\n</code></pre></p> </li> <li> <p>Direct usage:     <pre><code>logger = Logger(\"app.log\")\nawait logger.log(\"message\")\nawait logger.aclose()  # Must be explicitly closed\n</code></pre></p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str | Path | None</code> <p>Path to the log file. If None, logs will be written to stdout</p> <code>None</code> <p>Initialize a new Logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str | Path | None</code> <p>Path to the log file. If None, logs will be written to stdout.</p> <code>None</code> Source code in <code>freeact/logger.py</code> <pre><code>def __init__(self, file: str | Path | None = None):\n    \"\"\"Initialize a new Logger instance.\n\n    Args:\n        file: Path to the log file. If None, logs will be written to stdout.\n    \"\"\"\n    self.writer = FileWriter(file) if file else StdoutWriter()\n    self.var = ContextVar[List[str]](\"context\", default=[])\n    self.queue = asyncio.Queue()  # type: ignore\n    self.runner = asyncio.create_task(self._run())\n</code></pre>"},{"location":"api/logger/#freeact.logger.Logger.aclose","title":"aclose  <code>async</code>","text":"<pre><code>aclose()\n</code></pre> <p>Close the logger and process remaining entries.</p> <p>This method must be called explicitly when using the <code>Logger</code> directly (not as a context manager) to ensure all queued log entries are processed before shutting down.</p> <p>When using the <code>Logger</code> as a context manager, this method is called automatically.</p> Source code in <code>freeact/logger.py</code> <pre><code>async def aclose(self):\n    \"\"\"Close the logger and process remaining entries.\n\n    This method must be called explicitly when using the `Logger` directly (not as\n    a context manager) to ensure all queued log entries are processed before\n    shutting down.\n\n    When using the `Logger` as a context manager, this method is called automatically.\n    \"\"\"\n    # first process all queued entries\n    await self.queue.join()\n    # then cancel the queue consumer\n    self.runner.cancel()\n</code></pre>"},{"location":"api/logger/#freeact.logger.Logger.context","title":"context  <code>async</code>","text":"<pre><code>context(frame: str)\n</code></pre> <p>A context manager that adds an additional context frame to the current context.</p> Example <pre><code>async with logger.context(\"User Login\"):\n    await logger.log(\"Attempting login\")  # Logs with \"User Login\" context\n    await db.query(...)\n    await logger.log(\"Login successful\")  # Logs with \"User Login\" context\n\n    # Contexts can be nested\n    async with logger.context(\"Profile\"):\n        # Logs with \"User Login / Profile\" context\n        await logger.log(\"Loading user profile\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>str</code> <p>The context frame name to add</p> required <p>Yields:</p> Type Description <p>The Logger instance.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>Re-raises any exception that occurs within the context after logging it.</p> Source code in <code>freeact/logger.py</code> <pre><code>@asynccontextmanager\nasync def context(self, frame: str):\n    \"\"\"A context manager that adds an additional context frame to the current context.\n\n    Example:\n        ```python\n        async with logger.context(\"User Login\"):\n            await logger.log(\"Attempting login\")  # Logs with \"User Login\" context\n            await db.query(...)\n            await logger.log(\"Login successful\")  # Logs with \"User Login\" context\n\n            # Contexts can be nested\n            async with logger.context(\"Profile\"):\n                # Logs with \"User Login / Profile\" context\n                await logger.log(\"Loading user profile\")\n        ```\n\n    Args:\n        frame: The context frame name to add\n\n    Yields:\n        The Logger instance.\n\n    Raises:\n        Exception: Re-raises any exception that occurs within the context after logging it.\n    \"\"\"\n    context = self.var.get().copy()\n    context.append(frame)\n    token = self.var.set(context)\n\n    try:\n        yield self\n    except Exception as e:\n        await self.log_error(e)\n        raise\n    finally:\n        self.var.reset(token)\n</code></pre>"},{"location":"api/logger/#freeact.logger.Logger.log","title":"log  <code>async</code>","text":"<pre><code>log(message: str, metadata: dict[str, Any] | None = None)\n</code></pre> <p>Log a message with optional metadata.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log</p> required <code>metadata</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of additional data to include</p> <code>None</code> Source code in <code>freeact/logger.py</code> <pre><code>async def log(self, message: str, metadata: dict[str, Any] | None = None):\n    \"\"\"Log a message with optional metadata.\n\n    Args:\n        message: The message to log\n        metadata: Optional dictionary of additional data to include\n    \"\"\"\n    entry = MessageEntry(\n        context=self.var.get(),\n        message=message,\n        caller=self._get_caller_module_name(),\n        metadata=metadata,\n    )\n    await self.queue.put(entry)\n</code></pre>"},{"location":"api/logger/#freeact.logger.Logger.log_error","title":"log_error  <code>async</code>","text":"<pre><code>log_error(e: Exception)\n</code></pre> <p>Log an exception with its full traceback.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>Exception</code> <p>The exception to log.</p> required Source code in <code>freeact/logger.py</code> <pre><code>async def log_error(self, e: Exception):\n    \"\"\"Log an exception with its full traceback.\n\n    Args:\n        e: The exception to log.\n    \"\"\"\n    entry = ErrorEntry(\n        context=self.var.get(),\n        error=e,\n    )\n    await self.queue.put(entry)\n</code></pre>"},{"location":"api/model/","title":"Model","text":"<p>This module defines the interfaces of code action models. A code action model is a model that responds with code if it decides to perform an action in the environment.</p> <p>This module defines the core interfaces that code action models must implement to work with the <code>freeact</code> agent system. It defines abstract base classes for:</p> <ul> <li>The main model interface (<code>CodeActModel</code>)</li> <li>Model interaction turns (<code>CodeActModelTurn</code>)</li> <li>Model responses (<code>CodeActModelResponse</code>)</li> </ul>"},{"location":"api/model/#freeact.model.base.CodeActModel","title":"CodeActModel","text":"<p>               Bases: <code>ABC</code></p> <p>Interface for models that can generate code actions.</p> <p>A code action model handles both initial user queries and feedback from code execution results. It decides when to generate code for execution and when to provide final responses to the user.</p>"},{"location":"api/model/#freeact.model.base.CodeActModel.feedback","title":"feedback  <code>abstractmethod</code>","text":"<pre><code>feedback(feedback: str, is_error: bool, tool_use_id: str | None, tool_use_name: str | None, **kwargs) -&gt; CodeActModelTurn\n</code></pre> <p>Create a new interaction turn from execution feedback.</p> <p>Initiates a new interaction based on feedback from previous code execution, allowing the model to refine or correct its responses. A feedback turn must follow a previous request turn or feedback turn.</p> <p>Parameters:</p> Name Type Description Default <code>feedback</code> <code>str</code> <p>The feedback text from code execution.</p> required <code>is_error</code> <code>bool</code> <p>Whether the feedback represents an error condition.</p> required <code>tool_use_id</code> <code>str | None</code> <p>Identifier for the specific tool use instance.</p> required <code>tool_use_name</code> <code>str | None</code> <p>Name of the tool that was used.</p> required <code>**kwargs</code> <p>Additional model-specific parameters for the feedback.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>CodeActModelTurn</code> <code>CodeActModelTurn</code> <p>A new turn object representing this interaction.</p> Source code in <code>freeact/model/base.py</code> <pre><code>@abstractmethod\ndef feedback(\n    self,\n    feedback: str,\n    is_error: bool,\n    tool_use_id: str | None,\n    tool_use_name: str | None,\n    **kwargs,\n) -&gt; CodeActModelTurn:\n    \"\"\"Create a new interaction turn from execution feedback.\n\n    Initiates a new interaction based on feedback from previous code execution,\n    allowing the model to refine or correct its responses. A feedback turn must\n    follow a previous request turn or feedback turn.\n\n    Args:\n        feedback (str): The feedback text from code execution.\n        is_error (bool): Whether the feedback represents an error condition.\n        tool_use_id (str | None): Identifier for the specific tool use instance.\n        tool_use_name (str | None): Name of the tool that was used.\n        **kwargs: Additional model-specific parameters for the feedback.\n\n    Returns:\n        CodeActModelTurn: A new turn object representing this interaction.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/model/#freeact.model.base.CodeActModel.request","title":"request","text":"<pre><code>request(user_query: str, **kwargs)\n</code></pre> <p>Creates a new interaction turn from a user query.</p> <p>Parameters:</p> Name Type Description Default <code>user_query</code> <code>str</code> <p>The user's input query or request</p> required <code>**kwargs</code> <p>Additional model-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <p>A new turn object representing this interaction</p> Source code in <code>freeact/model/base.py</code> <pre><code>def request(self, user_query: str, **kwargs):\n    \"\"\"Creates a new interaction turn from a user query.\n\n    Args:\n        user_query: The user's input query or request\n        **kwargs: Additional model-specific parameters\n\n    Returns:\n        A new turn object representing this interaction\n    \"\"\"\n</code></pre>"},{"location":"api/model/#freeact.model.base.CodeActModelResponse","title":"CodeActModelResponse  <code>dataclass</code>","text":"<pre><code>CodeActModelResponse(text: str, is_error: bool)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>A response from a code action model.</p> <p>Represents a single response from the model, which may contain executable code, error information, and tool usage metadata.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>The raw text response from the model.</p> <code>is_error</code> <code>bool</code> <p>Whether this response represents an error condition.</p>"},{"location":"api/model/#freeact.model.base.CodeActModelResponse.code","title":"code  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>code: str | None\n</code></pre> <p>Executable code from the model response if present.</p>"},{"location":"api/model/#freeact.model.base.CodeActModelTurn","title":"CodeActModelTurn","text":"<p>               Bases: <code>ABC</code></p> <p>A single turn of interaction with a code action model.</p> <p>Supports both bulk response retrieval and incremental streaming of the model's output. Each turn represents one complete model interaction, whether from a user query or execution feedback.</p>"},{"location":"api/model/#freeact.model.base.CodeActModelTurn.response","title":"response  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>response() -&gt; CodeActModelResponse\n</code></pre> <p>Get the complete response for this model interaction turn.</p> <p>Waits for and returns the full model response, including any code blocks and metadata about tool usage.</p> Source code in <code>freeact/model/base.py</code> <pre><code>@abstractmethod\nasync def response(self) -&gt; CodeActModelResponse:\n    \"\"\"Get the complete response for this model interaction turn.\n\n    Waits for and returns the full model response, including any code blocks\n    and metadata about tool usage.\n    \"\"\"\n</code></pre>"},{"location":"api/model/#freeact.model.base.CodeActModelTurn.stream","title":"stream  <code>abstractmethod</code>","text":"<pre><code>stream(emit_retry: bool = False) -&gt; AsyncIterator[str | StreamRetry]\n</code></pre> <p>Stream the model's response as it is generated.</p> <p>Yields chunks of the response as they become available, allowing for real-time processing of model output.</p> <p>Parameters:</p> Name Type Description Default <code>emit_retry</code> <code>bool</code> <p>If <code>True</code>, emit <code>StreamRetry</code> objects when retries occur.              If <code>False</code>, handle retries silently. Defaults to <code>False</code>.</p> <code>False</code> <p>Yields:</p> Type Description <code>AsyncIterator[str | StreamRetry]</code> <p>str | StreamRetry: Either a chunk of the response text, or a <code>StreamRetry</code>              object if a retry event occurs and <code>emit_retry</code> is <code>True</code>.</p> Source code in <code>freeact/model/base.py</code> <pre><code>@abstractmethod\ndef stream(self, emit_retry: bool = False) -&gt; AsyncIterator[str | StreamRetry]:\n    \"\"\"Stream the model's response as it is generated.\n\n    Yields chunks of the response as they become available, allowing for\n    real-time processing of model output.\n\n    Args:\n        emit_retry (bool): If `True`, emit `StreamRetry` objects when retries occur.\n                         If `False`, handle retries silently. Defaults to `False`.\n\n    Yields:\n        str | StreamRetry: Either a chunk of the response text, or a `StreamRetry`\n                         object if a retry event occurs and `emit_retry` is `True`.\n    \"\"\"\n</code></pre>"},{"location":"api/model/#freeact.model.base.StreamRetry","title":"StreamRetry  <code>dataclass</code>","text":"<pre><code>StreamRetry(cause: str, retry_wait_time: float)\n</code></pre> <p>Emitted in a response stream to inform about a retry event.</p> <p>Used when streaming responses encounter temporary failures and need to retry.</p> <p>Attributes:</p> Name Type Description <code>cause</code> <code>str</code> <p>The reason for the retry attempt.</p> <code>retry_wait_time</code> <code>float</code> <p>Time in seconds to wait before retrying.</p>"},{"location":"tutorials/basics/","title":"Basic usage","text":"<p>A <code>freeact</code> agent system consists of:</p> <ul> <li>A code execution Docker container, managed by the <code>CodeExecutionContainer</code> context manager. This tutorial uses the <code>gradion-ai/ipybox-example</code> image.</li> <li>A code executor, managed by the <code>CodeExecutor</code> context manager. It manages an IPython kernel's lifecycle within the container and handles code execution.</li> <li>A code action model that generates code actions to be executed by the executor. Models must implement the interfaces defined in the <code>freeact.model</code> package. This tutorial uses <code>Claude</code>, configured with <code>claude-3-5-sonnet-20241022</code> as model name.</li> <li>A <code>CodeActAgent</code> configured with both the model and executor. It orchestrates their interaction until a final response is ready.</li> </ul> freeact/examples/basics.py<pre><code>import asyncio\nimport os\n\nfrom dotenv import load_dotenv\n\nfrom freeact import (\n    Claude,\n    CodeActAgent,\n    CodeExecutionContainer,\n    CodeExecutor,\n)\nfrom freeact.cli.utils import stream_conversation\nfrom freeact.logger import Logger\n\n\nasync def main():\n    api_keys = {\n        \"ANTHROPIC_API_KEY\": os.environ[\"ANTHROPIC_API_KEY\"],\n        \"GOOGLE_API_KEY\": os.environ[\"GOOGLE_API_KEY\"],\n    }\n\n    async with CodeExecutionContainer(\n        tag=\"gradion-ai/ipybox-example\",  # (2)!\n        env=api_keys,\n        workspace_path=\"workspace\",  # (3)!\n    ) as container:\n        async with CodeExecutor(\n            key=\"example\",  # (4)!\n            port=container.port,  # (5)!\n            workspace=container.workspace,\n        ) as executor:\n            skill_sources = await executor.get_module_sources(\n                [\"freeact_skills.search.google.stream.api\"],  # (6)!\n            )\n            async with Logger(file=\"logs/agent.log\") as logger:  # (7)!\n                model = Claude(model_name=\"claude-3-5-sonnet-20241022\", logger=logger)\n                agent = CodeActAgent(model=model, executor=executor)\n                await stream_conversation(agent, skill_sources=skill_sources)  # (1)!\n\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    asyncio.run(main())\n</code></pre> <ol> <li> freeact/cli/utils.py::stream_conversation<pre><code>async def stream_conversation(agent: CodeActAgent, **kwargs):\n    while True:\n        user_message = await ainput(\"User message: ('q' to quit) \")\n\n        if user_message.lower() == \"q\":\n            break\n\n        agent_turn = agent.run(user_message, **kwargs)\n        await stream_turn(agent_turn)\n\n\nasync def stream_turn(agent_turn: CodeActAgentTurn):\n    produced_images: Dict[Path, Image.Image] = {}\n\n    async for activity in agent_turn.stream():\n        match activity:\n            case CodeActModelTurn() as turn:\n                print(\"Agent response:\")\n                async for s in turn.stream():\n                    print(s, end=\"\", flush=True)\n                print()\n\n            case CodeExecution() as execution:\n                print(\"Execution result:\")\n                async for s in execution.stream():\n                    print(s, end=\"\", flush=True)\n                result = await execution.result()\n                produced_images.update(result.images)\n                print()\n\n    if produced_images:\n        print(\"\\n\\nProduced images:\")\n    for path in produced_images.keys():\n        print(str(path))\n</code></pre> </li> <li> <p>Tag of the <code>ipybox</code> Docker image.</p> </li> <li> <p>Path to the workspace directory on the host machine. This directory enables sharing custom skills modules between the container and host machine (see Custom skills tutorial).</p> </li> <li> <p>Key for this executor's private workspace directories:</p> <ul> <li><code>workspace/skills/private/example</code>: Private skills and working directory</li> <li><code>workspace/images/example</code>: Directory for storing produced images</li> </ul> </li> <li> <p>Container host port. Automatically allocated by <code>CodeExecutionContainer</code> but can be manually specified.</p> </li> <li> <p>Skill modules on the <code>executor</code>'s Python path that can be resolved to their source code and metadata. This information is included in the code action <code>model</code>'s context.</p> </li> <li> <p>A contextual <code>Logger</code> for recording messages and metadata.</p> </li> </ol> <p>A <code>CodeActAgent</code> can engage in multi-turn conversations with a user. Each turn is initiated using the agent's <code>run</code> method. We use the <code>stream_conversation</code> (1) helper function to <code>run</code> the agent and stream the output from both the agent's model and code executor to <code>stdout</code>.</p> <ol> <li>freeact/cli/utils.py::stream_conversation<pre><code>async def stream_conversation(agent: CodeActAgent, **kwargs):\n    while True:\n        user_message = await ainput(\"User message: ('q' to quit) \")\n\n        if user_message.lower() == \"q\":\n            break\n\n        agent_turn = agent.run(user_message, **kwargs)\n        await stream_turn(agent_turn)\n\n\nasync def stream_turn(agent_turn: CodeActAgentTurn):\n    produced_images: Dict[Path, Image.Image] = {}\n\n    async for activity in agent_turn.stream():\n        match activity:\n            case CodeActModelTurn() as turn:\n                print(\"Agent response:\")\n                async for s in turn.stream():\n                    print(s, end=\"\", flush=True)\n                print()\n\n            case CodeExecution() as execution:\n                print(\"Execution result:\")\n                async for s in execution.stream():\n                    print(s, end=\"\", flush=True)\n                result = await execution.result()\n                produced_images.update(result.images)\n                print()\n\n    if produced_images:\n        print(\"\\n\\nProduced images:\")\n    for path in produced_images.keys():\n        print(str(path))\n</code></pre></li> </ol> <p>This tutorial uses the <code>freeact_skills.search.google.stream.api</code> skill module from the <code>freeact-skills</code> project to process queries that require internet searches. This module provides generative Google search capabilities powered by the Gemini 2 API.</p> <p>The skill module's source code is obtained from the <code>executor</code> and passed to the model through the agent's <code>run</code> method. Other model implementations may require skill module sources to be passed through their constructor instead.</p>"},{"location":"tutorials/basics/#running","title":"Running","text":"<pre><code>python -m freeact.examples.basics\n</code></pre> <p>initiates an interactive conversation with the agent. The output below shows the conversation flow, where user messages and final agent responses are displayed in blockquotes. Intermediate model outputs and execution details can be viewed by expanding the <code>...</code> sections. </p> <p>Note</p> <p>Alternatively, you can use the <code>freeact</code> CLI, which produces equivalent output to the Python example:</p> <pre><code>python -m freeact.cli \\\n  --model-name=claude-3-5-sonnet-20241022 \\\n  --ipybox-tag=gradion-ai/ipybox-example \\\n  --executor-key=example \\\n  --skill-modules=freeact_skills.search.google.stream.api\n</code></pre> <p>To use <code>gemini-2.0-flash-exp</code> instead of <code>claude-3-5-sonnet-20241022</code>, run:</p> <pre><code>python -m freeact.cli \\\n  --model-name=gemini-2.0-flash-exp \\\n  --ipybox-tag=gradion-ai/ipybox-example \\\n  --executor-key=example \\\n  --skill-modules=freeact_skills.search.google.stream.api\n</code></pre> <p><code>User message: ('q' to quit)</code> raise the current population of vienna to the power of 0.13</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; To solve this problem, I need to:</p> <ol> <li>Search for the current population of Vienna using the InternetSearch API</li> <li>Parse the result to extract the population number</li> <li>Raise that number to the power of 0.13</li> </ol> <p>I'll write code that uses the InternetSearch class to get this information and perform the calculation. &lt;/thinking&gt;</p> <pre><code>from freeact_skills.search.google.stream.api import InternetSearch\n\n# Create search instance and search for Vienna's population\nsearch = InternetSearch()\nprint(\"Searching for Vienna's population...\")\nsearch.search(\"What is the current population of Vienna, Austria in 2024? Just the number\")\n</code></pre> <p><code>Execution result:</code></p> <p>Searching for Vienna's population... The population of Vienna, Austria is approximately 2,006,134 as of the beginning of 2024.</p> <p><code>Agent response:</code></p> <p>Now I'll extract this number and perform the calculation.</p> <pre><code># Extract the population number and perform the calculation\npopulation = 2006134\nresult = population ** 0.13\n\nprint(f\"Vienna's population ({population}) raised to the power of 0.13 = {result:.2f}\")\n</code></pre> </li> </ol> <p><code>Agent response:</code></p> <p>The result of raising Vienna's current population (2,006,134) to the power of 0.13 is 6.60.</p> <p><code>User message: ('q' to quit)</code> plot its evolution over the past 5 years without raising to 0.13</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; To create this plot, I need to:</p> <ol> <li>Search for Vienna's population data over the past 5 years</li> <li>Create a line plot using matplotlib showing the evolution</li> <li>Make sure to properly label the axes and show the plot</li> </ol> <p>&lt;/thinking&gt;</p> <pre><code>from freeact_skills.search.google.stream.api import InternetSearch\n\n# Search for historical population data\nsearch = InternetSearch()\nprint(\"Searching for Vienna's population over the past 5 years...\")\nsearch.search(\"What was Vienna's population each year from 2019 to 2024? List year by year\")\n</code></pre> <p><code>Execution result:</code></p> <p>Searching for Vienna's population over the past 5 years... It appears you're asking about the population of Vienna, Austria, from 2019 to 2024. Here's a breakdown of the available data:</p> <p>Please note: Population figures can vary slightly depending on the source and the specific date within the year the data was collected. The figures below are based on the most recent and reliable data available.</p> <ul> <li>2019: Approximately 1,903,240</li> <li>2020: Approximately 1,915,155</li> <li>2021: Approximately 1,923,825. By the end of October 2021, the population was over 1.92 million.</li> <li>2022: Approximately 1,982,097. The population of Vienna increased by 12.4% between 2011 and October 31, 2021.</li> <li>2023: Approximately 2,005,760. Vienna passed the 2 million mark in the third quarter of 2023.</li> <li>2024: Approximately 2,006,134 (as of January 1, 2024).</li> </ul> <p>Key Trends and Additional Information:</p> <ul> <li>Growth: Vienna has experienced significant population growth in recent years.</li> <li>2 Million Mark: Vienna's population surpassed 2 million in 2023.</li> <li>Fastest Growing City: Vienna is considered one of the fastest-growing cities in Europe.</li> <li>Migration: A significant portion of Austria's population growth is due to net migration gains.</li> <li>Most Livable City: Vienna has consistently been ranked as one of the most livable cities in the world.</li> <li>Largest City in Austria: Vienna is the largest city in Austria.</li> <li>Foreign Nationals: As of January 1, 2024, 35.4% of Vienna's population were foreign nationals.</li> <li>Population Density: Vienna has an average population density of 4,835 people per square kilometer.</li> </ul> <p>It's worth noting that some sources provide slightly different numbers, but the figures above represent the most consistent and up-to-date information available.</p> <p><code>Agent response:</code></p> <p>Now I'll create a plot using this data:</p> <p><pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data from the search results\nyears = [2019, 2020, 2021, 2022, 2023, 2024]\npopulation = [1903240, 1915155, 1923825, 1982097, 2005760, 2006134]\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(years, population, marker='o', linewidth=2, markersize=8)\n\n# Customize the plot\nplt.title(\"Population of Vienna (2019-2024)\", fontsize=14, pad=15)\nplt.xlabel(\"Year\", fontsize=12)\nplt.ylabel(\"Population\", fontsize=12)\n\n# Format y-axis to show millions\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x:,.0f}'))\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Rotate x-axis labels for better readability\nplt.xticks(years, rotation=0)\n\n# Add data points labels\nfor i, pop in enumerate(population):\n    plt.annotate(f'{pop:,}',\n                (years[i], pop),\n                textcoords=\"offset points\",\n                xytext=(0,10),\n                ha='center')\n\n# Adjust layout to prevent label cutoff\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n</code></pre> <code>Execution result:</code></p> <p>&lt;Figure size 1000x600 with 1 Axes&gt;</p> <p><code>Produced images:</code></p> <p>![image_0](workspace/images/example/a53d6656.png)</p> </li> </ol> <p><code>Agent response:</code></p> <p>I've created a line plot showing Vienna's population evolution from 2019 to 2024. The plot shows a steady increase in population over these years, with a particularly notable jump between 2021 and 2022. The city reached and surpassed the 2 million mark in 2023, and as of 2024, the population stands at 2,006,134 people. Each data point is labeled with the exact population figure for easy reference.</p> <p><code>Produced images:</code></p> <p></p>"},{"location":"tutorials/extend/","title":"System extensions","text":"<p>This tutorial demonstrates how <code>freeact</code> agents can be customized through system extensions. These may include runbooks, constraints, domain-specific rules, or whatever you think is relevant for the agent's behavior. You'll see:</p> <ul> <li>How to implement a human-in-the-loop workflow, enabling users to review and edit the agent's action plans</li> <li>How to make the agent more proactive by configuring it to suggest 3 follow-up actions after each response</li> <li>How to implement domain-specific rules (demonstrated by an example that multiplies temperatures by 3.17 in weather-related responses)</li> </ul> <p>Note</p> <p>System extensions are currently only supported for Claude models.</p> <p>The conversation below was guided by this system extension:</p> extension.txt<pre><code>Your overall workflow instructions (= runbook):\n- Start answering an initial user query\n- In your final answer to the user query, additionally suggest 3 follow up actions the user can take\n- Let the user choose one of the follow up actions or choose another action if none of the follow up actions are relevant\n- After sharing your reasoning in &lt;thinking&gt; tags, you MUST ask the user for feedback.\n  - do not generate and execute code yet at this point.\n  - the user may either confirm your reasoning and let you proceed with generating code\n  - or ask you to modify your reasoning and reasoning steps based on their feedback\n- Repeat the overall workflow with the chosen follow up action\n\nDomain-specific rules:\n- If the initial query or a follow-up action is related to the weather in a given city, output the current temperature in the city multiplied by 3.17.\n</code></pre> <p>It was initiated with the following <code>freeact.cli</code> command, referencing the <code>extension.txt</code> file with the <code>--system-extension</code> option and reusing the developed <code>weather.weather_report</code> skill from the Custom skills tutorial.</p> <pre><code>python -m freeact.cli \\\n  --model-name=claude-3-5-sonnet-20241022 \\\n  --ipybox-tag=gradion-ai/ipybox-example \\\n  --executor-key=example \\\n  --skill-modules=freeact_skills.search.google.stream.api \\\n  --skill-modules=freeact_skills.zotero.api \\\n  --skill-modules=freeact_skills.reader.api \\\n  --skill-modules=weather.weather_report \\\n  --system-extension=extension.txt\n</code></pre> <p><code>User message: ('q' to quit)</code> what is the weather in heidelberg? do not plot</p> <p><code>Agent response:</code></p> <p>Let me help you get the weather information for Heidelberg.</p> <p>&lt;thinking&gt;</p> <ol> <li>Since this is a weather-related query for a specific city (Heidelberg), I need to:<ul> <li>Use the weather_report module to get the current weather</li> <li>According to the domain-specific rules, I need to multiply the current temperature by 3.17</li> </ul> </li> <li>I'll use the get_weather_report function from the weather.weather_report module</li> <li>I'll extract just the current temperature and perform the required calculation</li> </ol> <p>&lt;/thinking&gt;</p> <p>Would you like me to proceed with generating and executing the code based on this reasoning?</p> <p><code>User message: ('q' to quit)</code> history should be over past 3 days</p> <p><code>Agent response:</code></p> <p>&lt;thinking&gt;</p> <ol> <li>Since this is a weather-related query for Heidelberg, I need to:<ul> <li>Use the weather_report module to get the current weather and 3 days of history</li> <li>According to the domain-specific rules, I need to multiply the current temperature by 3.17</li> </ul> </li> <li>I'll use the get_weather_report function from the weather.weather_report module with n_days=3</li> <li>I'll extract:<ul> <li>Current temperature (and multiply by 3.17)</li> <li>Historical temperatures for the past 3 days</li> </ul> </li> <li>I'll format this information in an easy to read way</li> </ol> <p>&lt;/thinking&gt;</p> <p>Would you like me to proceed with generating and executing the code based on this reasoning?</p> <p><code>User message: ('q' to quit)</code> y</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>I'll generate and execute the code now.</p> <pre><code>from weather.weather_report import get_weather_report\nfrom datetime import datetime\n\n# Get weather report for Heidelberg with 3 days history\nweather_data = get_weather_report(\"Heidelberg\", n_days=3)\n\n# Extract current data\ncurrent_temp = weather_data['current']['temperature']\ncurrent_time = weather_data['current']['measurement_time']\nspecial_temp = current_temp * 3.17\n\n# Extract historical data\nhistorical = weather_data['historical']\ndates = historical['dates']\ntemps = historical['temperatures']\n\n# Print results\nprint(f\"Weather in Heidelberg:\")\nprint(f\"\\nCurrent temperature ({current_time.strftime('%Y-%m-%d %H:%M')}): {current_temp:.1f}\u00b0C\")\nprint(f\"Current temperature \u00d7 3.17 = {special_temp:.1f}\u00b0C\")\n\nprint(\"\\nHistorical temperatures (past 3 days):\")\nfor date, temp in zip(dates, temps):\n    print(f\"{date}: {temp:.1f}\u00b0C\")\n</code></pre> <p><code>Execution result:</code></p> <p>Weather in Heidelberg:</p> <p>Current temperature (2024-12-24 07:30): 0.9\u00b0C Current temperature \u00d7 3.17 = 2.9\u00b0C</p> <p>Historical temperatures (past 3 days): 2024-12-21: 4.9\u00b0C 2024-12-22: 5.1\u00b0C 2024-12-23: 2.8\u00b0C</p> </li> </ol> <p><code>Agent response:</code></p> <p>Based on the weather data:</p> <ul> <li>The current temperature in Heidelberg is 0.9\u00b0C (measured at 2024-12-24 07:30)</li> <li>According to the special calculation rule (temp \u00d7 3.17), the result is 2.9\u00b0C</li> <li> <p>Over the past 3 days, temperatures have been:</p> <ul> <li>Dec 21: 4.9\u00b0C</li> <li>Dec 22: 5.1\u00b0C</li> <li>Dec 23: 2.8\u00b0C</li> </ul> <p>showing a cooling trend towards today's temperature.</p> </li> </ul> <p>Here are 3 suggested follow-up actions:</p> <ol> <li>Would you like to see a visualization of the temperature trend over these days?</li> <li>Would you like to compare Heidelberg's weather with another nearby city?</li> <li>Would you like to get additional weather parameters like humidity for Heidelberg?</li> </ol> <p>Please let me know which follow-up action interests you, or feel free to ask something else!</p> <p><code>User message: ('q' to quit)</code> 1</p> <p><code>Agent response:</code></p> <p>&lt;thinking&gt;</p> <ol> <li>To visualize the temperature trend, I will:<ul> <li>Create a line plot using matplotlib</li> <li>Include both historical and current temperatures</li> <li>Add proper labels, title, and grid for better readability</li> <li>Format dates nicely on the x-axis</li> </ul> </li> <li>I'll combine the historical data with the current temperature to show the complete trend</li> <li>I'll make sure to call plt.show() to display the plot</li> </ol> <p>&lt;/thinking&gt;</p> <p>Would you like me to proceed with generating and executing the code based on this reasoning?</p> <p><code>User message: ('q' to quit)</code> y</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>I'll generate and execute the code to create the visualization now.</p> <pre><code>import matplotlib.pyplot as plt\nfrom datetime import datetime\nimport matplotlib.dates as mdates\n\n# Get the data again\nweather_data = get_weather_report(\"Heidelberg\", n_days=3)\n\n# Combine historical and current data\ndates = weather_data['historical']['dates'] + [weather_data['current']['measurement_time'].date()]\ntemperatures = weather_data['historical']['temperatures'] + [weather_data['current']['temperature']]\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(dates, temperatures, 'b-o', linewidth=2, markersize=8)\n\n# Customize the plot\nplt.title('Temperature Trend in Heidelberg', fontsize=14, pad=15)\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Temperature (\u00b0C)', fontsize=12)\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Format x-axis\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.xticks(rotation=45)\n\n# Add value labels on points\nfor i, (d, t) in enumerate(zip(dates, temperatures)):\n    plt.annotate(f'{t:.1f}\u00b0C',\n                (d, t),\n                textcoords=\"offset points\",\n                xytext=(0,10),\n                ha='center')\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p><code>Execution result:</code></p> <p>&lt;Figure size 1000x600 with 1 Axes&gt;</p> <p><code>Produced images:</code></p> <p>![image_0](workspace/images/example/98709542.png)</p> </li> </ol> <p><code>Agent response:</code></p> <p>I've created a visualization of Heidelberg's temperature trend over the past few days. The graph shows:</p> <ul> <li>A relatively stable temperature around 5\u00b0C on Dec 21-22</li> <li>A significant drop to 2.8\u00b0C on Dec 23</li> <li>A further decrease to the current temperature of 0.9\u00b0C on Dec 24</li> </ul> <p>Here are 3 suggested follow-up actions:</p> <ol> <li>Would you like to see this same visualization but with the humidity data included?</li> <li>Would you like to extend the historical period to see a longer trend (e.g., 7 days)?</li> <li>Would you like to compare this temperature trend with another city?</li> </ol> <p>Please let me know which follow-up action interests you, or feel free to ask something else!</p> <p><code>Produced images:</code></p> <p></p> <p><code>User message: ('q' to quit)</code> q</p> <p>...</p>"},{"location":"tutorials/setup/","title":"Setup","text":"<p>Follow the installation instructions with the following modifications:</p> <ol> <li> <p>Use a custom <code>dependencies.txt</code> file.</p> dependencies.txt<pre><code>freeact-skills = {version = \"0.0.6\", extras = [\"all\"]}\nmatplotlib = \"^3.10\"\nnumpy = \"^2.2\"\npandas = \"^2.2\"\npygithub = \"^2.5\"\nsympy = \"^1.13\"\n</code></pre> </li> <li> <p>Build a custom <code>ipybox</code> Docker image.</p> <pre><code>python -m ipybox build -t gradion-ai/ipybox-example -d dependencies.txt\n</code></pre> </li> <li> <p>Create a <code>.env</code> file with API keys:</p> <p>The predefined <code>freeact-skills</code> used in the tutorials require an <code>ANTHROPIC_API_KEY</code> and a <code>GOOGLE_API_KEY</code>. You can get them from Anthropic and Google AI Studio. Add them to a <code>.env</code> file in the current working directory:</p> .env<pre><code>ANTHROPIC_API_KEY=...\nGOOGLE_API_KEY=...\n</code></pre> </li> </ol>"},{"location":"tutorials/skills/","title":"Custom skills","text":"<p>This tutorial demonstrates how to develop and use custom skills through two examples: first creating a weather reporting skill from scratch, and then using that skill to generate weather comparisons and visualizations.</p> <p>Prerequisites</p> <p>It is recommended to complete the Basic Usage tutorial before proceeding with this one, as it covers fundamental concepts that are built upon here.</p>"},{"location":"tutorials/skills/#skill-development","title":"Skill development","text":"<p>This section demonstrates the interactive development of a custom weather reporting skill through a conversation between a user and a <code>freeact</code> agent. You'll see how the agent assists with software engineering tasks, evolving a simple weather query into a Python package that can:</p> <ul> <li>Fetch current weather conditions for any city</li> <li>Resolve city names to geographical coordinates</li> <li>Retrieve historical weather data</li> <li>Return structured data for both current and historical weather</li> </ul> <p>The development progresses through several iterations:</p> <ol> <li>Creating a code action to fetch Vienna's weather</li> <li>Converting it into a proper Python package</li> <li>Adding city name resolution</li> <li>Incorporating historical weather data</li> <li>Testing with various cities (New York, Vienna, Salzburg)</li> </ol> <p>The interactively developed <code>weather.weather_report</code> (1) skill uses the Open-Meteo API for weather data and OpenStreetMap's Nominatim service for geocoding.</p> <ol> <li><pre><code>\"\"\"\nWeather reporting functionality using Open-Meteo API\n\"\"\"\n\nfrom datetime import date, datetime, timedelta\nfrom typing import Any, Dict\n\nimport requests\n\n\ndef get_coordinates(city_name: str) -&gt; tuple[float, float]:\n    \"\"\"Get latitude and longitude for a given city name using Nominatim geocoding service.\"\"\"\n    url = f\"https://nominatim.openstreetmap.org/search?city={city_name}&amp;format=json\"\n    response = requests.get(url, headers={\"User-Agent\": \"weather-report-script\"})\n    response.raise_for_status()\n\n    data = response.json()\n    if not data:\n        raise ValueError(f\"Could not find coordinates for city: {city_name}\")\n\n    # Take the first result\n    location = data[0]\n    return float(location[\"lat\"]), float(location[\"lon\"])\n\n\ndef get_weather_report(city_name: str, n_days: int = 7) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get current and historical weather report for a given city.\n\n    Args:\n        city_name: Name of the city to get weather for\n        n_days: Number of past days to get historical data for (excluding current day)\n\n    Returns:\n        Dictionary containing:\n        current:\n            - temperature (float): Current temperature in Celsius\n            - humidity (float): Current relative humidity in percent\n            - measurement_time (datetime): Time of measurement\n        historical:\n            - dates (List[date]): List of dates\n            - temperatures (List[float]): Daily average temperatures in Celsius\n            - humidities (List[float]): Daily average relative humidities in percent\n        metadata:\n            - city (str): City name used in query\n            - coordinates (tuple): (latitude, longitude) of the city\n    \"\"\"\n    # Get coordinates for the city\n    lat, lon = get_coordinates(city_name)\n\n    # Calculate date range for historical data\n    end_date = date.today() - timedelta(days=1)  # yesterday\n    start_date = end_date - timedelta(days=n_days - 1)\n\n    # Make API call for current weather\n    current_url = f\"https://api.open-meteo.com/v1/forecast?latitude={lat}&amp;longitude={lon}&amp;current=temperature_2m,relative_humidity_2m&amp;timezone=auto\"\n    current_response = requests.get(current_url)\n    current_response.raise_for_status()\n    current_data = current_response.json()\n\n    # Make API call for historical weather\n    historical_url = f\"https://api.open-meteo.com/v1/forecast?latitude={lat}&amp;longitude={lon}&amp;daily=temperature_2m_mean,relative_humidity_2m_mean&amp;start_date={start_date}&amp;end_date={end_date}&amp;timezone=auto\"\n    historical_response = requests.get(historical_url)\n    historical_response.raise_for_status()\n    historical_data = historical_response.json()\n\n    # Extract current weather\n    current = current_data[\"current\"]\n\n    # Extract historical weather\n    daily = historical_data[\"daily\"]\n\n    return {\n        \"current\": {\n            \"temperature\": current[\"temperature_2m\"],\n            \"humidity\": current[\"relative_humidity_2m\"],\n            \"measurement_time\": datetime.fromisoformat(current[\"time\"]),\n        },\n        \"historical\": {\n            \"dates\": [date.fromisoformat(d) for d in daily[\"time\"]],\n            \"temperatures\": daily[\"temperature_2m_mean\"],\n            \"humidities\": daily[\"relative_humidity_2m_mean\"],\n        },\n        \"metadata\": {\"city\": city_name, \"coordinates\": (lat, lon)},\n    }\n</code></pre></li> </ol> <p>Note</p> <p>Interactive skill development is currently only supported for Claude models.</p> <p>The conversation below was initiated with the following <code>freeact.cli</code> command<sup>1</sup>. The developed <code>weather.weather_report</code> skill is written to the <code>workspace/skills/private/example</code> directory.</p> <pre><code>python -m freeact.cli \\\n  --model-name=claude-3-5-sonnet-20241022 \\\n  --ipybox-tag=gradion-ai/ipybox-example \\\n  --executor-key=example \\\n  --skill-modules=freeact_skills.search.google.stream.api \\\n  --skill-modules=freeact_skills.zotero.api \\\n  --skill-modules=freeact_skills.reader.api\n</code></pre> <p><code>User message: ('q' to quit)</code> get the current temperature and humidity in vienna, also show the measurement time</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; To get current weather data for Vienna, I'll use the open-meteo API which provides free weather data. I'll use Python's requests library to make the API call and get real-time data.</p> <p>Steps:</p> <ol> <li>Use the open-meteo API to get current weather for Vienna (coordinates: 48.21\u00b0N, 16.37\u00b0E)</li> <li>Extract temperature, humidity and current time from the response</li> <li>Format and display the results</li> </ol> <p>&lt;/thinking&gt;</p> <pre><code>import requests\nfrom datetime import datetime\n\n# Make API call to open-meteo\nurl = \"https://api.open-meteo.com/v1/forecast?latitude=48.21&amp;longitude=16.37&amp;current=temperature_2m,relative_humidity_2m&amp;timezone=Europe/Vienna\"\nresponse = requests.get(url)\ndata = response.json()\n\n# Extract current weather data\ncurrent = data['current']\ntemp = current['temperature_2m']\nhumidity = current['relative_humidity_2m']\ntime = datetime.fromisoformat(current['time'])\n\nprint(f\"Current weather in Vienna:\")\nprint(f\"Temperature: {temp}\u00b0C\")\nprint(f\"Relative Humidity: {humidity}%\")\nprint(f\"Measurement time: {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n</code></pre> <p><code>Execution result:</code></p> <p>Current weather in Vienna: Temperature: 2.9\u00b0C Relative Humidity: 74% Measurement time: 2024-12-24 06:30:00</p> </li> </ol> <p><code>Agent response:</code></p> <p>Based on the current weather data from Vienna, Austria:</p> <ul> <li>Temperature: 2.9\u00b0C</li> <li>Relative Humidity: 74%</li> <li>Measurement time: December 24, 2024 at 06:30:00 local time</li> </ul> <p>The data was retrieved in real-time from the Open-Meteo weather API.</p> <p><code>User message: ('q' to quit)</code> save this to a function get_weather_report that returns these data as dict and additionally resolves coordinates for a given city_name argument. Create a package weather and save the function to weather_report.py in that package</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; I'll help create a weather package with the weather reporting functionality. Here's what I'll do:</p> <ol> <li>Create a package directory 'weather'</li> <li>Create an init.py to make it a proper package</li> <li>Create weather_report.py with the function that:<ul> <li>Takes a city name as input</li> <li>Uses geocoding to get coordinates</li> <li>Gets weather data</li> <li>Returns a dictionary with the results</li> </ul> </li> <li>I'll use the geocoding API from nominatim.openstreetmap.org for coordinates</li> </ol> <p>&lt;/thinking&gt;</p> <pre><code>print(file_editor(**{'command': 'create', 'path': 'weather/__init__.py', 'file_text': '... omitted ...'}))\n</code></pre> <p><code>Execution result:</code></p> <p>File created successfully at: weather/init.py</p> <p><code>Agent response:</code></p> <pre><code>print(file_editor(**{'command': 'create', 'path': 'weather/weather_report.py', 'file_text': '... omitted ...'}))\n</code></pre> <p><code>Execution result:</code></p> <p>File created successfully at: weather/weather_report.py</p> <p><code>Agent response:</code></p> <p>Let's test the new package to make sure it works:</p> <pre><code>from weather import get_weather_report\n\n# Test the function with Vienna\nreport = get_weather_report('Vienna')\n\nprint(f\"Weather report for {report['city']}:\")\nprint(f\"Coordinates: {report['coordinates']}\")\nprint(f\"Temperature: {report['temperature']}\u00b0C\")\nprint(f\"Relative Humidity: {report['humidity']}%\")\nprint(f\"Measurement time: {report['measurement_time'].strftime('%Y-%m-%d %H:%M:%S')}\")\n</code></pre> <p><code>Execution result:</code></p> <p>Weather report for Vienna: Coordinates: (48.2083537, 16.3725042) Temperature: 2.9\u00b0C Relative Humidity: 74% Measurement time: 2024-12-24 06:30:00</p> </li> </ol> <p><code>Agent response:</code></p> <p>I've created a weather package with the following structure:</p> <pre><code>weather/\n    __init__.py\n    weather_report.py\n</code></pre> <p>The package provides a <code>get_weather_report()</code> function that:</p> <ol> <li>Takes a city name as input</li> <li>Resolves coordinates using OpenStreetMap's Nominatim geocoding service</li> <li>Fetches weather data from Open-Meteo API</li> <li>Returns a dictionary with temperature, humidity, measurement time, city name, and coordinates</li> </ol> <p>As shown in the test, the function works correctly for Vienna and can be used for any city. The package can be imported with <code>from weather import get_weather_report</code>.</p> <p><code>User message: ('q' to quit)</code> test this for new york</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; I'll test the weather reporting function for New York City using the newly created package. &lt;/thinking&gt;</p> <pre><code>from weather import get_weather_report\n\n# Test the function with New York\nreport = get_weather_report('New York')\n\nprint(f\"Weather report for {report['city']}:\")\nprint(f\"Coordinates: {report['coordinates']}\")\nprint(f\"Temperature: {report['temperature']}\u00b0C\")\nprint(f\"Relative Humidity: {report['humidity']}%\")\nprint(f\"Measurement time: {report['measurement_time'].strftime('%Y-%m-%d %H:%M:%S')}\")\n</code></pre> <p><code>Execution result:</code></p> <p>Weather report for New York: Coordinates: (40.7127281, -74.0060152) Temperature: -2.0\u00b0C Relative Humidity: 73% Measurement time: 2024-12-24 00:30:00</p> </li> </ol> <p>The function works successfully for New York! Here's the current weather data:</p> <ul> <li>Temperature: -2.0\u00b0C</li> <li>Relative Humidity: 73%</li> <li>Measurement time: December 24, 2024 at 00:30:00 local time</li> <li>Location coordinates: (40.71\u00b0N, 74.01\u00b0W)</li> </ul> <p>Note that the measurement time is different from Vienna because it's automatically adjusted to New York's local timezone (which is several hours behind Vienna).</p> <p><code>User message: ('q' to quit)</code> extend the weather report to also return the temperature and humidity history over the past n days, excluding the current day.</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; I'll modify the weather_report.py file to:</p> <ol> <li>Add a new parameter n_days for historical data</li> <li>Use the Open-Meteo API's historical weather data endpoint</li> <li>Return both current and historical data in the result dictionary</li> <li>Format historical data as a list of daily measurements</li> </ol> <p>&lt;/thinking&gt;</p> <pre><code>print(file_editor(**{'command': 'str_replace', 'path': 'weather/weather_report.py', 'old_str': '... omitted ...', 'new_str': '... omitted ...'}))\n</code></pre> <p><code>Execution result:</code></p> <p>The file weather/weather_report.py has been edited. Here's the result of running <code>cat -n</code> on a snippet of weather/weather_report.py: <pre><code>    1  \"\"\"\n    2  Weather reporting functionality using Open-Meteo API\n    3  \"\"\"\n    4\n    5  import requests\n    6  from datetime import datetime, timedelta, date\n    7  from typing import Dict, Any, List\n    8\n    9\n    10  def get_coordinates(city_name: str) -&gt; tuple[float, float]:\n    11      \"\"\"Get latitude and longitude for a given city name using Nominatim geocoding service.\"\"\"\n</code></pre> Review the changes and make sure they are as expected. Edit the file again if necessary.</p> <p><code>Agent response:</code></p> <pre><code>print(file_editor(**{'command': 'str_replace', 'path': 'weather/weather_report.py', 'old_str': '... omitted ...', 'new_str': '... omitted ...'}))\n</code></pre> <p><code>Execution result:</code></p> <p>The file weather/weather_report.py has been edited. Here's the result of running <code>cat -n</code> on a snippet of weather/weather_report.py: <pre><code>    21      location = data[0]\n    22      return float(location['lat']), float(location['lon'])\n    23\n    24\n    25  def get_weather_report(city_name: str, n_days: int = 7) -&gt; Dict[str, Any]:\n    26      \"\"\"\n    27      Get current and historical weather report for a given city.\n    28\n    29      Args:\n    30          city_name: Name of the city to get weather for\n    31          n_days: Number of past days to get historical data for (excluding current day)\n    32\n    33      Returns:\n    34          Dictionary containing:\n    35          current:\n    36              - temperature (float): Current temperature in Celsius\n    37              - humidity (float): Current relative humidity in percent\n    38              - measurement_time (datetime): Time of measurement\n    39          historical:\n    40              - dates (List[date]): List of dates\n    41              - temperatures (List[float]): Daily average temperatures in Celsius\n    42              - humidities (List[float]): Daily average relative humidities in percent\n    43          metadata:\n    44              - city (str): City name used in query\n    45              - coordinates (tuple): (latitude, longitude) of the city\n    46      \"\"\"\n    47      # Get coordinates for the city\n    48      lat, lon = get_coordinates(city_name)\n    49\n    50      # Calculate date range for historical data\n    51      end_date = date.today() - timedelta(days=1)  # yesterday\n    52      start_date = end_date - timedelta(days=n_days-1)\n    53\n    54      # Make API call for current weather\n    55      current_url = f\"https://api.open-meteo.com/v1/forecast?latitude={lat}&amp;longitude={lon}&amp;current=temperature_2m,relative_humidity_2m&amp;timezone=auto\"\n    56      current_response = requests.get(current_url)\n    57      current_response.raise_for_status()\n    58      current_data = current_response.json()\n    59\n    60      # Make API call for historical weather\n    61      historical_url = f\"https://api.open-meteo.com/v1/forecast?latitude={lat}&amp;longitude={lon}&amp;daily=temperature_2m_mean,relative_humidity_2m_mean&amp;start_date={start_date}&amp;end_date={end_date}&amp;timezone=auto\"\n    62      historical_response = requests.get(historical_url)\n    63      historical_response.raise_for_status()\n    64      historical_data = historical_response.json()\n    65\n    66      # Extract current weather\n    67      current = current_data['current']\n    68\n    69      # Extract historical weather\n    70      daily = historical_data['daily']\n    71\n    72      return {\n    73          'current': {\n    74              'temperature': current['temperature_2m'],\n    75              'humidity': current['relative_humidity_2m'],\n    76              'measurement_time': datetime.fromisoformat(current['time'])\n    77          },\n    78          'historical': {\n    79              'dates': [date.fromisoformat(d) for d in daily['time']],\n    80              'temperatures': daily['temperature_2m_mean'],\n    81              'humidities': daily['relative_humidity_2m_mean']\n    82          },\n    83          'metadata': {\n    84              'city': city_name,\n    85              'coordinates': (lat, lon)\n    86          }\n    87      }\n</code></pre></p> <p>Review the changes and make sure they are as expected. Edit the file again if necessary.</p> <p><code>Agent response:</code></p> <p>Let's test the updated function with New York, getting 5 days of historical data:</p> <pre><code>from weather import get_weather_report\n\n# Test the function with New York, 5 days history\nreport = get_weather_report('New York', n_days=5)\n\n# Print current weather\nprint(f\"Weather report for {report['metadata']['city']}:\")\nprint(f\"Coordinates: {report['metadata']['coordinates']}\")\nprint(\"\\nCurrent conditions:\")\nprint(f\"Temperature: {report['current']['temperature']}\u00b0C\")\nprint(f\"Relative Humidity: {report['current']['humidity']}%\")\nprint(f\"Measurement time: {report['current']['measurement_time'].strftime('%Y-%m-%d %H:%M:%S')}\")\n\n# Print historical data\nprint(\"\\nHistorical daily averages:\")\nfor date, temp, hum in zip(\n    report['historical']['dates'],\n    report['historical']['temperatures'],\n    report['historical']['humidities']\n):\n    print(f\"{date}: {temp:.1f}\u00b0C, {hum:.0f}% humidity\")\n</code></pre> <p><code>Execution result:</code></p> <p>Weather report for New York: Coordinates: (40.7127281, -74.0060152)  </p> <p>Current conditions: Temperature: -2.0\u00b0C Relative Humidity: 73% Measurement time: 2024-12-24 00:30:00  </p> <p>Historical daily averages: 2024-12-19: 4.9\u00b0C, 62% humidity 2024-12-20: 1.2\u00b0C, 78% humidity 2024-12-21: -2.0\u00b0C, 68% humidity 2024-12-22: -7.7\u00b0C, 48% humidity 2024-12-23: -6.7\u00b0C, 54% humidity</p> </li> </ol> <p><code>Agent response:</code></p> <p>I've updated the weather reporting package to include historical data. The new function:</p> <ol> <li>Takes an optional <code>n_days</code> parameter (defaults to 7) to specify how many days of historical data to retrieve</li> <li> <p>Returns a restructured dictionary with three main sections:</p> <ul> <li><code>current</code>: Current weather conditions</li> <li><code>historical</code>: Daily average temperatures and humidities for past days</li> <li><code>metadata</code>: City information and coordinates</li> </ul> </li> </ol> <p>The test results show both current conditions in New York and the daily averages for the past 5 days. The historical data shows an interesting cold spell with temperatures dropping from 4.9\u00b0C on December 19 to -7.7\u00b0C on December 22, with varying humidity levels.</p> <p>The function now provides a more comprehensive weather report that can be used to analyze both current conditions and recent weather patterns for any city.</p> <p><code>User message: ('q' to quit)</code> test it for salzburg</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; I'll test the enhanced weather reporting function for Salzburg, Austria to get both current conditions and historical data. &lt;/thinking&gt;</p> <pre><code>from weather import get_weather_report\n\n# Test the function with Salzburg, 5 days history\nreport = get_weather_report('Salzburg', n_days=5)\n\n# Print current weather\nprint(f\"Weather report for {report['metadata']['city']}:\")\nprint(f\"Coordinates: {report['metadata']['coordinates']}\")\nprint(\"\\nCurrent conditions:\")\nprint(f\"Temperature: {report['current']['temperature']}\u00b0C\")\nprint(f\"Relative Humidity: {report['current']['humidity']}%\")\nprint(f\"Measurement time: {report['current']['measurement_time'].strftime('%Y-%m-%d %H:%M:%S')}\")\n\n# Print historical data\nprint(\"\\nHistorical daily averages:\")\nfor date, temp, hum in zip(\n    report['historical']['dates'],\n    report['historical']['temperatures'],\n    report['historical']['humidities']\n):\n    print(f\"{date}: {temp:.1f}\u00b0C, {hum:.0f}% humidity\")\n</code></pre> <p><code>Execution result:</code></p> <p>Weather report for Salzburg: Coordinates: (47.7981346, 13.0464806)</p> <p>Current conditions: Temperature: 1.0\u00b0C Relative Humidity: 92% Measurement time: 2024-12-24 06:30:00</p> <p>Historical daily averages: 2024-12-19: 6.3\u00b0C, 81% humidity 2024-12-20: 2.5\u00b0C, 82% humidity 2024-12-21: 2.3\u00b0C, 67% humidity 2024-12-22: 3.9\u00b0C, 80% humidity 2024-12-23: 1.1\u00b0C, 85% humidity</p> </li> </ol> <p><code>Agent response:</code></p> <p>The weather report for Salzburg shows:</p> <p>Current conditions:</p> <ul> <li>Temperature: 1.0\u00b0C</li> <li>Relative Humidity: 92%</li> <li>Measurement time: December 24, 2024 at 06:30:00 local time</li> <li>Location coordinates: (47.80\u00b0N, 13.05\u00b0E)</li> </ul> <p>Historical daily averages over the past 5 days:</p> <ul> <li>Dec 19: 6.3\u00b0C, 81% humidity</li> <li>Dec 20: 2.5\u00b0C, 82% humidity</li> <li>Dec 21: 2.3\u00b0C, 67% humidity</li> <li>Dec 22: 3.9\u00b0C, 80% humidity</li> <li>Dec 23: 1.1\u00b0C, 85% humidity</li> </ul> <p>The data shows that Salzburg has experienced relatively mild winter temperatures over the past few days, with a cooling trend from 6.3\u00b0C on December 19 to the current 1.0\u00b0C. The city consistently shows high humidity levels, typically above 80%, with the current humidity being particularly high at 92%.</p> <p><code>User message: ('q' to quit)</code> q</p>"},{"location":"tutorials/skills/#skill-usage","title":"Skill usage","text":"<p>This section demonstrates how to use the previously developed weather reporting skill in a separate conversation. After loading <code>weather.weather_report</code> as additional skill<sup>2</sup>, we'll see how the agent can:</p> <ul> <li>Create multi-city weather reports with much smaller code actions</li> <li>Create data visualizations comparing weather patterns</li> <li>Provide clear, natural language summaries of weather conditions</li> </ul> <p>The example shows a request for weather data from Paris and Berlin, where the agent automatically:</p> <ol> <li>Retrieves current conditions and 4-day history for both cities using the <code>weather.weather_report</code> skill</li> <li>Creates comparative visualizations of temperature and humidity trends</li> <li>Presents the data in both graphical and text formats</li> </ol> <p>The conversation was initiated with the following <code>freeact.cli</code> command. The developed skill is is read from <code>workspace/skills/private/example</code>. If we moved it to <code>workspace/skills/shared</code>, it would be available to all executors regardless of their <code>executor-key</code> value.</p> <pre><code>python -m freeact.cli \\\n  --model-name=claude-3-5-sonnet-20241022 \\\n  --ipybox-tag=gradion-ai/ipybox-example \\\n  --executor-key=example \\\n  --skill-modules=freeact_skills.search.google.stream.api \\\n  --skill-modules=freeact_skills.zotero.api \\\n  --skill-modules=freeact_skills.reader.api \\\n  --skill-modules=weather.weather_report\n</code></pre> <p><code>User message: ('q' to quit)</code> report the weather of paris and berlin, with 4 days history</p> <p><code>...</code> (1)</p> <ol> <li> <p><code>Agent response:</code></p> <p>&lt;thinking&gt; I'll help you get weather reports for Paris and Berlin using the weather_report module. I'll:</p> <ol> <li>Get weather data for both cities using get_weather_report()</li> <li>Create a clear visualization comparing the temperatures and humidities</li> <li>Print the current conditions and show historical trends in a plot</li> </ol> <p>&lt;/thinking&gt;</p> <pre><code>import matplotlib.pyplot as plt\nfrom weather.weather_report import get_weather_report\n\n# Get weather data for both cities\nparis_weather = get_weather_report(\"Paris\", n_days=4)\nberlin_weather = get_weather_report(\"Berlin\", n_days=4)\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n# Plot temperatures\nax1.plot(paris_weather['historical']['dates'], paris_weather['historical']['temperatures'], 'o-', label='Paris')\nax1.plot(berlin_weather['historical']['dates'], berlin_weather['historical']['temperatures'], 'o-', label='Berlin')\nax1.set_ylabel('Temperature (\u00b0C)')\nax1.set_title('Historical Temperature Comparison')\nax1.grid(True)\nax1.legend()\n\n# Plot humidities\nax2.plot(paris_weather['historical']['dates'], paris_weather['historical']['humidities'], 'o-', label='Paris')\nax2.plot(berlin_weather['historical']['dates'], berlin_weather['historical']['humidities'], 'o-', label='Berlin')\nax2.set_ylabel('Relative Humidity (%)')\nax2.set_title('Historical Humidity Comparison')\nax2.grid(True)\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n\n# Print current conditions\nprint(\"Current Weather Conditions:\")\nprint(\"\\nParis:\")\nprint(f\"Temperature: {paris_weather['current']['temperature']}\u00b0C\")\nprint(f\"Humidity: {paris_weather['current']['humidity']}%\")\nprint(f\"Measured at: {paris_weather['current']['measurement_time']}\")\n\nprint(\"\\nBerlin:\")\nprint(f\"Temperature: {berlin_weather['current']['temperature']}\u00b0C\")\nprint(f\"Humidity: {berlin_weather['current']['humidity']}%\")\nprint(f\"Measured at: {berlin_weather['current']['measurement_time']}\")\n</code></pre> <p><code>Execution result:</code></p> <p>&lt;Figure size 1200x800 with 2 Axes&gt;Current Weather Conditions:</p> <p>Paris: Temperature: 5.8\u00b0C Humidity: 94% Measured at: 2024-12-24 06:45:00</p> <p>Berlin: Temperature: 3.3\u00b0C Humidity: 89% Measured at: 2024-12-24 06:45:00</p> <p><code>Produced images:</code></p> <p>![image_0](workspace/images/example/815afaa2.png)</p> </li> </ol> <p><code>Agent response:</code></p> <p>I've retrieved and visualized the weather data for both Paris and Berlin. Here's the weather report:</p> <p>Current Conditions (as of December 24, 06:45):</p> <ul> <li>Paris: 5.8\u00b0C with 94% humidity</li> <li>Berlin: 3.3\u00b0C with 89% humidity</li> </ul> <p>I've created a visualization showing the historical temperature and humidity trends for the past 4 days for both cities. The graphs show:</p> <ol> <li>Temperature comparison (top graph): Shows how temperatures have varied in both cities over the past 4 days</li> <li>Humidity comparison (bottom graph): Shows the relative humidity trends for both cities</li> </ol> <p>As we can see from the data:</p> <ul> <li>Paris is currently slightly warmer than Berlin</li> <li>Both cities are experiencing high humidity levels</li> <li>The historical trends show the temperature and humidity variations over the past few days, which you can observe in the graphs above</li> </ul> <p>The visualization allows you to see how the weather patterns have evolved and compare the conditions between the two cities.</p> <p><code>Produced images:</code></p> <p></p> <p>...</p> <ol> <li> <p>The provided skill modules are not needed in this example but included to demonstrate that their usage is optional.\u00a0\u21a9</p> </li> <li> <p>We may automate this process in the future e.g. to load skill modules based on the details of a user's query.\u00a0\u21a9</p> </li> </ol>"}]}